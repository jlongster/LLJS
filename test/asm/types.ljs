
extern assertEqual;

struct Point {
  function void Point(double x, double y) {
      this->x = x;
      this->y = y;
  }

  double x, y;
}

struct Complex {
  double x;
  int y;
  Point *point;
}

union Value {
  u8 byte[4];
  int x;
}

function double bar(Point *p) {
  let Complex c;
  c.x = 3.4;
  c.y = 5;
  c.point = p;

  return c.y + c.point->x;
}

function double foo() {
  let Point p1(5.5, 6.6);
  let Point p2(7.7, 8.8);
  let Point p3(9.9, 1.1);

  return p2.x + p3.y;
}

function double main() {
  let Point p1(1.2, 3.4);
  let Point p2(1.3, 3.5);
  let Point p3(1.4, 3.6);
  let Point p4(1.5, 3.7);
  let Point p5(1.6, 3.8);

  assertEqual(p5.x, 1.6);
  assertEqual(p3.y, 3.6);

  let Point *p = &p2;
  assertEqual(p->x, 1.3);

  assertEqual(foo(), 8.8);
  assertEqual(bar(&p1), 6.2);

  assertEqual(p5.x, 1.6);
  assertEqual(p3.y, 3.6);

  // Not working yet
  // let int x[5] = [5, 6, 7, 8, 9];
  // assertEqual(x[0], 5);

  let Value v;
  v.x = 512;
  assertEqual(int(v.byte[0]), 0);
  assertEqual(int(v.byte[1]), 2);
  assertEqual(int(v.byte[2]), 0);
  assertEqual(int(v.byte[3]), 0);
}
